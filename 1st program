You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:

The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.
//Python//

from typing import List

def evaluate_rpn(tokens: List[str]) -> int:
    # Initialize an empty stack
    stack = []
    
    # Iterate through the tokens
    for token in tokens:
        # If the token is an operator, pop the top two values from the stack
        if token in ['+', '-', '*', '/']:
            val2 = stack.pop()
            val1 = stack.pop()
            
            # Perform the operation and push the result back onto the stack
            if token == '+':
                stack.append(val1 + val2)
            elif token == '-':
                stack.append(val1 - val2)
            elif token == '*':
                stack.append(val1 * val2)
            elif token == '/':
                stack.append(val1 // val2)
        # If the token is a value, convert it to an integer and push it onto the stack
        else:
            stack.append(int(token))
    
    # The result will be the top value on the stack
    return stack[0]
//C++//

#include <iostream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

int evaluate_rpn(vector<string> tokens) {
    // Initialize an empty stack
    stack<int> stack;
    
    // Iterate through the tokens
    for (string token : tokens) {
        // If the token is an operator, pop the top two values from the stack
        if (token == "+" || token == "-" || token == "*" || token == "/") {
            int val2 = stack.top();
            stack.pop();
            int val1 = stack.top();
            stack.pop();
            
            // Perform the operation and push the result back onto the stack
            if (token == "+") {
                stack.push(val1 + val2);
            } else if (token == "-") {
                stack.push(val1 - val2);
            } else if (token == "*") {
                stack.push(val1 * val2);
            } else if (token == "/") {
                stack.push(val1 / val2);
            }
        }
        // If the token is a value, convert it to an integer and push it onto the stack
        else {
            stack.push(stoi(token));
        }
    }
    
    // The result will be the top value on the stack
    return stack.top();
}

//C//


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_TOKENS 100

typedef struct {
    int top;
    int items[MAX_TOKENS];
} Stack;

void push(Stack *stack, int value) {
    if (stack->top == MAX_TOKENS - 1) {
        fprintf(stderr, "Stack overflow\n");
